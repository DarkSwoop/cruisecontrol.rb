#!/usr/bin/env ruby

RAILS_ENV = 'add_project'

require 'optparse'

scm_options = {:interactive => true}
trace = false

if ARGV.first and ARGV.first !~ /^-/
  project_name = ARGV.shift
  if ARGV.first and ARGV.first !~ /^-/
    scm_options[:url] = ARGV.shift 
  end
end

ARGV.options do |opts|
  opts.banner = "usage: cruise add <project-name> --url <source control URL> [source control options]"

  opts.separator ""

  opts.on("-u", "--url url", String,
          "The source control repository url for the project (eg. svn://rubyforge.org/var/svn/cruisecontrolrb)") do |v|
    scm_options[:url] = v
  end
  opts.on("-s source_control", "--source-control source_control", String,
          "Specify the source control manager to use (default: subversion)") do |v|
    scm_options[:source_control] = v
  end
  opts.on("--username username", String, "Specify a username for source control") { |v| scm_options[:username] = v }
  opts.on("--password password", String, "Specify a password for source control") { |v| scm_options[:password] = v }
  opts.on('-t', '--trace', 'Print out exception stack traces') { trace = true }

  opts.separator ""

  opts.on("-h", "--help", "Show this help message.") { puts opts; exit }

  args = opts.parse!

  unless project_name and scm_options[:url]
    STDERR.puts "Project name and url are mandatory"
    STDERR.puts
    puts opts
    exit(-1)
  end

  # Project Name can only contain alphanumeric characters
  if project_name.match /[^-_a-zA-Z0-9]/
    STDERR.puts "'#{project_name}' is not a valid project name. Project name should only contain alphanumeric " +
        'characters, dashes and underscores, and no whitespace.'
    exit(-1)
  end
end

puts "Adding project '#{project_name}' (this may take a while)..."

begin 

  require File.dirname(__FILE__) + '/../config/boot'
  require RAILS_ROOT + "/config/environment"

  if scm_options[:source_control].nil?
    source_control_class =
      case scm_options[:url]
      when /^git:/ then Git
      when /^svn:/, /^svn\+ssh:/ then Subversion
      else Subversion
      end
  else
    source_control_class_name = scm_options[:source_control].to_s.camelize

    begin
      source_control_class = source_control_class_name.constantize
    rescue => e
      raise "#{scm_options[:source_control].inspect} is not a valid --source-control value [#{e.message}]"
    end

    unless source_control_class.ancestors.include?(AbstractSourceControlAdapter)
      raise "#{scm_options[:source_control].inspect} is not a valid --source-control value " +
            "[#{source_control_class_name} is not a subclass of AbstractSourceControlAdapter]"
    end
  end

  scm_options.delete(:source_control)

  source_control = source_control_class.new(scm_options)
  project = Project.new(project_name, source_control)
	projects = Projects.load_all
	projects << project
	
	if source_control.url =~ /^svn\+ssh\:\/\//
    puts "IMPORTANT!!! - It looks like you are connecting to your repository with an svn+ssh connection.  " +
         "For cruise to build this project, you need to have set up authentication caching for ssh, see this article"
    puts "   http://subversion.tigris.org/faq.html#ssh-auth-cache"
    puts
  end

rescue => e
  STDERR.puts "FAILED: #{e.message}"
  if trace
    STDERR.puts e.backtrace.map { |line| "    #{line}" }
  end
  exit(-1)
end

puts "Project '#{project_name}' added."